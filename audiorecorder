#!/usr/bin/env bash
config="$HOME/.$(basename "${0}").conf"
bwf_config="$HOME/.$(basename "${0}")_BWF.conf"
touch "${config}"
touch "${bwf_config}"
. "$config"
. "${bwf_config}"

_usage(){
    echo "Usage: $(basename "${0}") [ -h | -e | -p | -m | -b ]"
    echo "  -h  display this help menu"
    echo "  -e  edit"
    echo "  -p  passthrough"
    echo "  -m  metadata"
    echo "  -b  bext"
}

OPTIND=1
while getopts ":hepmb" opt ; do
    case "${opt}" in
        h) _usage ; exit 0 ;;
        e) runtype="edit" ;;
        p) runtype="passthrough" ;;
        m) runtype="metadata" ;;
        b) runtype="bext";;
        *) echo "Error: bad option -${OPTARG}" ; _usage ; exit 1 ;;
    esac
done

_lookup_sample_rate(){
    case "${1}" in
        "44.1 kHz")
            SAMPLE_RATE_NUMERIC="44100"
            ;;
        "48 kHz")
            SAMPLE_RATE_NUMERIC="48000"
            ;;
        "96 kHz")
            SAMPLE_RATE_NUMERIC="96000"
            ;;
    esac
}

_lookup_bit_depth(){
    case "${1}" in
        "16 bit")
            CODEC="pcm_s16le"
            ;;
        "24 bit")
            CODEC="pcm_s24le"
            ;;
    esac
}

_lookup_channel_layout(){
    case "${1}" in
        "1")
            CHANNEL_LAYOUT="-channel_layout mono" && SOXCHANNELS="1"
            ;;
        "2")
            CHANNEL_LAYOUT="-channel_layout mono" && SOXCHANNELS="2"
            ;;
        "1 and 2")
            CHANNEL_LAYOUT="-channel_layout stereo" && SOXCHANNELS="1 2"
    esac
}

_get_ITEM_ID(){
    echo "Please Input Item ID or type Q to exit"
    read ITEM_ID
    if [[ "${ITEM_ID}" = [Qq] ]] ; then
        echo "Goodbye!"
        exit 0
    fi
    if [ -f "${output}/${ITEM_ID}.wav" ] ; then
        echo "A file with that name already exists!"
        _get_ITEM_ID
    fi
}

_destination_check(){
    if [ -z "${output}" ] || [ ! -d "${output}" ] ; then
        echo "Please enter a valid output directory"
        read -r output
        _destination_check
    fi
}

_metadata_gui(){
    gui_conf="
    # Set transparency: 0 is transparent, 1 is opaque
    *.transparency=0.95
    # Set window title
    *.title = Edit Metadata Values
    # intro text
    intro.width = 300
    intro.type = text
    intro.text = Hello
    #Originator
    originator.type = textfield
    originator.label = Enter Originator
    originator.default = "${originator}"
    #Coding History
    coding_history.type = textbox
    coding_history.label = Enter Coding History
    coding_history.default = "${coding_history}"
    cb.type = cancelbutton
    cb.label = Cancel
    "

    pashua_configfile=$(/usr/bin/mktemp /tmp/pashua_XXXXXXXXX)
    echo "${gui_conf}" > "${pashua_configfile}"
    pashua_run
    rm "${pashua_configfile}"
}

_master_gui(){
    gui_conf="
    # Set transparency: 0 is transparent, 1 is opaque
    *.transparency=0.95
    # Set window title
    *.title = Welcome to Audio Recorder!
    # intro text
    intro.width = 300
    intro.type = text
    intro.text = Hello
    #Output Location
    output.type = openbrowser
    output.label = Output Location
    output.default = "${output}"
    #Sample Rate
    sample_rate.type = radiobutton
    sample_rate.label = Select Sample Rate
    sample_rate.option = 44.1 kHz
    sample_rate.option = 48 kHz
    sample_rate.option = 96 kHz
    sample_rate.default = "${sample_rate}"
    #Bit Depth
    bit_depth.type = radiobutton
    bit_depth.label = Select Bit Depth
    bit_depth.option = 16 bit
    bit_depth.option = 24 bit
    bit_depth.default = "${bit_depth}"
    #Channel Layout
    channel_layout.type = radiobutton
    channel_layout.label = Select Input Channel(s)
    channel_layout.option = 1
    channel_layout.option = 2
    channel_layout.option = 1 and 2
    channel_layout.default = "${channel_layout}"
    #Enable BWF
    bwf.type = checkbox
    bwf.label = Embed BWF Metadata
    bwf.default = "${bwf}"
    #Cancel Button
    cb.type = cancelbutton
    cb.label = Cancel
    "

    pashua_configfile=$(/usr/bin/mktemp /tmp/pashua_XXXXXXXXX)
    echo "${gui_conf}" > "${pashua_configfile}"
    pashua_run
    rm "${pashua_configfile}"
}

_post_digitization_gui(){
    post_gui_conf="
    # Set transparency: 0 is transparent, 1 is opaque
    *.transparency=0.95
    # Set window title
    *.title = Press ok to exit
    # intro text
    intro.width = 300
    intro.type = text
    intro.text = Please Select Post-digitization Options
    intro.x = 160
    intro.y = 120
    #Preview
    preview.type = button
    preview.label = Preview
    preview.x = 10
    preview.y = 70
    #Trim Preview
    trim_preview.type = button
    trim_preview.label = Preview Trim
    trim_preview.x = 110
    trim_preview.y = 70
    #Trim
    trim.type = button
    trim.label = Trim 
    trim.x = 235
    trim.y = 70
    #Start Trim Length
    StartTrimLength.type = textfield
    StartTrimLength.label = Enter amount to trim (in whole seconds) from start of file.  Leave blank or as 'auto' to auto trim.
    StartTrimLength.width = 100
    StartTrimLength.default = auto
    StartTrimLength.x = 10
    StartTrimLength.y = 10
    "

    pashua_configfile=$(/usr/bin/mktemp /tmp/pashua_XXXXXXXXX)
    echo "${post_gui_conf}" > "${pashua_configfile}"
    pashua_run
    rm "${pashua_configfile}"
    
    if [ "${preview}" = "1" ] ; then
        _preview_file && _post_digitization_gui
    fi
    
    if [ "${trim_preview}" = "1" ] ; then
        _preview_trim && _post_digitization_gui
    fi
    if [ "${trim}" = "1" ] ; then
        _trim_file && _post_digitization_gui
    fi
    
}

_embed_bext(){
    echo "Preparing to embed metadata in ${BEXT_TARGET}"
    echo ""
    if (("${#ITEM_ID}" > 32)) ; then
        orig_ref="See description for Identifiers"
    else
        orig_ref="${ITEM_ID}"
    fi

    bwfmetaedit --reject-overwrite --Description="${ITEM_ID}".wav --Originator="${originator}" --OriginatorReference="${orig_ref}" --History="${coding_history}" --IARL="${originator}" --MD5-Embed --OriginationDate=$(date "+%Y-%m-%d") --OriginationTime=$(date "+%H:%M:%S") "${BEXT_TARGET}"
}

pashua_run() {
    # Wrapper function for interfacing to Pashua. Written by Carsten
    # Bluem <carsten@bluem.net> in 10/2003, modified in 12/2003 (including
    # a code snippet contributed by Tor Sigurdsson), 08/2004 and 12/2004.
    # Write config file

    # Find Pashua binary. We do search both . and dirname "$0"
    # , as in a doubleclickable application, cwd is /
    # BTW, all these quotes below are necessary to handle paths
    # containing spaces.
    bundlepath="Pashua.app/Contents/MacOS/Pashua"
    mypath=$(dirname "${0}")
    for searchpath in "$mypath/Pashua" "$mypath/$bundlepath" "./$bundlepath" \
                      "/Applications/$bundlepath" "$HOME/Applications/$bundlepath"
    do
        if [ -f "$searchpath" -a -x "$searchpath" ] ; then
            pashuapath=$searchpath
            break
        fi
    done
    if [ ! "$pashuapath" ] ; then
        echo "Error: Pashua is not found."
        break 2
    fi
    encoding=""
    # Get result
    result=$("$pashuapath" $encoding $pashua_configfile | sed 's/ /;;;/g')

    # Parse result
    for line in $result ; do
        key=$(echo $line | sed 's/^\([^=]*\)=.*$/\1/')
        value=$(echo $line | sed 's/^[^=]*=\(.*\)$/\1/' | sed 's/;;;/ /g')
        varname=$key
        varvalue="$value"
        eval $varname='$varvalue'
    done
} # pashua_run()

if [ "${runtype}" = "edit" ] ; then
    _master_gui

    {
    echo "output=\"${output}\""
    echo "sample_rate=\"${sample_rate}\""
    echo "bit_depth=\"${bit_depth}\""
    echo "channel_layout=\"${channel_layout}\""
    echo "bwf=\"${bwf}\""
    } > "${config}"
fi
if [ "${runtype}" = "metadata" ] ; then
    _metadata_gui

    {
    echo "originator=\"${originator}\""
    echo "coding_history=\"${coding_history}\""
    } > "${bwf_config}"
fi

#Verify and configure
if [ -n "${sample_rate}" ] ; then
    _lookup_sample_rate "${sample_rate}"
else
    echo "No Sample Rate Specified.  Setting to 96kH."
    SAMPLE_RATE_NUMERIC="96000"
fi
if [ -n "${bit_depth}" ] ; then
    _lookup_bit_depth  "${bit_depth}"
else
    echo "No Bit Depth Specified.  Setting to 24."
    CODEC="pcm_s24le"
fi
if [ -n "${channel_layout}" ] ; then
    _lookup_channel_layout "${channel_layout}"
else
    echo "No Channel Layout Specified. Setting Input to Channels 1 and 2"
    channel_layout="1 and 2"
fi
_destination_check

FILTER_CHAIN="asplit=6[out1][a][b][c][d][e],\
[e]showvolume=w=700:c=0xff0000:r=30[e1],\
[a]showfreqs=mode=bar:cmode=separate:size=300x300:colors=magenta|yellow[a1],\
[a1]drawbox=12:0:3:300:white@0.2[a2],[a2]drawbox=66:0:3:300:white@0.2[a3],[a3]drawbox=135:0:3:300:white@0.2[a4],[a4]drawbox=202:0:3:300:white@0.2[a5],[a5]drawbox=271:0:3:300:white@0.2[aa],\
[b]avectorscope=s=300x300:r=30:zoom=5[b1],\
[b1]drawgrid=x=150:y=150:c=white@0.3[bb],\
[c]showspectrum=s=400x600:slide=scroll:mode=combined:color=rainbow:scale=lin:saturation=4[cc],\
[d]astats=metadata=1:reset=1,adrawgraph=lavfi.astats.Overall.Peak_level:max=0:min=-30.0:size=700x256:bg=Black[dd],\
[dd]drawbox=0:0:700:42:hotpink@0.2:t=42[ddd],\
[aa][bb]vstack[aabb],[aabb][cc]hstack[aabbcc],[aabbcc][ddd]vstack[aabbccdd],[e1][aabbccdd]vstack[z],\
[z]drawtext=fontfile=/Library/Fonts/Andale Mono.ttf: text='%{pts \\: hms}':x=460: y=50:fontcolor=white:fontsize=30:box=1:boxcolor=0x00000000@1[fps],[fps]fps=fps=30[out0]"

# BEXT mode
if [ "${runtype}" = "bext" ] ; then
    ITEM_ID=$(echo $(basename "${2}") | cut -d'.' -f1)
    BEXT_TARGET="${2}"
    _embed_bext
    exit 0
fi

# Passthrough mode
if [ "${runtype}" = "passthrough" ] ; then
    rec -r "${SAMPLE_RATE_NUMERIC}" -b 32 -L -e signed-integer --buffer 500000 -p remix ${SOXCHANNELS} | ffmpeg ${CHANNEL_LAYOUT} -i - -f wav -c:a pcm_s16le -ar 44100 - |\
    ffplay -window_title "Monitoring Channel(s): ${channel_layout}" -f lavfi "amovie='pipe\:0',${FILTER_CHAIN}" 2> /dev/null
    stty sane
    exit
fi

# Record Mode
_get_ITEM_ID

if [ -e AUDIORECORDERTEMP.wav ] ; then
    rm -r AUDIORECORDERTEMP.wav
fi

#ASTATS_OUT=$(mktemp /tmp/temp.XXXX)
rec -r "${SAMPLE_RATE_NUMERIC}" -b 32 -L -e signed-integer --buffer 2000000 -p remix ${SOXCHANNELS} | ffmpeg ${CHANNEL_LAYOUT} -i - -f wav -c:a "${CODEC}" -ar "${SAMPLE_RATE_NUMERIC}" -metadata comment="" -y -rf64 auto AUDIORECORDERTEMP.wav -f wav -c:a pcm_s16le -ar 44100 - |\
ffplay -window_title "Currently Recording Channel(s): ${channel_layout}" -f lavfi "amovie='pipe\:0',${FILTER_CHAIN}" 2> /dev/null
# Cleanup
stty sane

##COMMENTING OUT FOR NOW DUE TO LACK OF ACCURACY###
# Post Recording Stats
#PEAK_COUNT=$(cat "${ASTATS_OUT}" | tail -n -8 | grep "Peak count" | cut -d':' -f2 | cut -c 2- | cut -d'.' -f1)

#if [ "${PEAK_COUNT}" -gt "4" ] ; then
#    echo -e "\033[101mWarning: There are $((${PEAK_COUNT} - 2)) samples with peaked levels in this recording.\033[0m"
#fi

#ASTATS=$(cat "${ASTATS_OUT}" | tail -n -8 | cut -d']' -f2 | cut -c 2- | head -n 4)
#echo -e "\033[1;32mLevels from recorded file are:\033[0m"
#echo -e "\033[1;32m${ASTATS}\033[0m"

#Post Record Functions
PRETRIM="${output}"/"${ITEM_ID}"_untrimmed.wav
FINALOUTPUT="${output}"/"${ITEM_ID}".wav
_preview_file(){
    mpv --force-window  --keep-open=yes --title=Preview --geometry=600x400 "${FINALOUTPUT}"
}

_preview_trim(){
    StartTrimLength=$(echo "${StartTrimLength}" | tr '[:lower:]' '[:upper:]')
     if [ "${StartTrimLength}" = "AUTO" ] || [ "${StartTrimLength}" = "" ] ; then
         mpv --force-window  --keep-open=yes --title="Preview Auto Trim" --geometry=600x400 "${FINALOUTPUT}" '--af=lavfi=graph="silenceremove=start_threshold=-57dB:start_duration=1:start_periods=1"'
     else
         mpv --force-window  --keep-open=yes --title="Preview Manual Trim" --start=+"${StartTrimLength}" --geometry=600x400 "${FINALOUTPUT}"
    fi
}

_trim_file(){
    StartTrimLength=$(echo "${StartTrimLength}" | tr '[:lower:]' '[:upper:]')
    mv "${FINALOUTPUT}" "${PRETRIM}"
    if [ "${StartTrimLength}" = "AUTO" ] || [ "${StartTrimLength}" = "" ] ; then
        ffmpeg -i "${PRETRIM}" -af silenceremove=start_threshold=-57dB:start_duration=1:start_periods=1:stop_periods=1:stop_duration=2:stop_threshold=-57dB -f wav -c:a "${CODEC}" -ar "${SAMPLE_RATE_NUMERIC}" -rf64 auto -y "${FINALOUTPUT}"
    else
        TRIMAMOUNT=$(date -j -v0H -f %s "${StartTrimLength}"  "+%H:%M:%S" 2> /dev/null)
        ffmpeg -ss "${TRIMAMOUNT}" -i "${PRETRIM}" -c copy -rf64 auto -y "${FINALOUTPUT}"
    fi
}

# Cleans up and loads post digitization option GUI
ffmpeg -i AUDIORECORDERTEMP.wav "${FINALOUTPUT}"
rm -r AUDIORECORDERTEMP.wav && _post_digitization_gui

# Embed metadata in BEXT
if [ "${bwf}" = "1" ] ; then
    BEXT_TARGET="${FINALOUTPUT}"
    _embed_bext
fi

#Cascadia Now!
